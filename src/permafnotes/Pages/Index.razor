@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@attribute [Authorize]

@inject NoteService NoteService

<PageTitle>Index</PageTitle>

<h2>Titles</h2>

<Table TItem="RankingRecord" DataSource="@Titles">
    <Column @bind-Field="context.Name" TData="string" Sortable Filterable />
    <Column @bind-Field="context.Count" TData="int" Sortable Filterable />
</Table>


<h2>Tags</h2>
<Table TItem="RankingRecord" DataSource="@Tags">
    <Column @bind-Field="context.Name" TData="string" Sortable Filterable />
    <Column @bind-Field="context.Count" TData="int" Sortable Filterable />
</Table>


@code
{
    public record RankingRecord
    {
        public string Name { get; set; } = string.Empty;
        public int Count { get; set; } = 0;

        public RankingRecord(string name, int count)
        {
            Name = name;
            Count = count;
        }
    }

    [Inject]
    private ILogger<Note> logger { get; set; }

    public IEnumerable<RankingRecord> Titles { get; set; } = new List<RankingRecord>();
    public IEnumerable<RankingRecord> Tags { get; set; } = new List<RankingRecord>();

    protected override async Task OnInitializedAsync()
    {
        var noteRecords = await NoteService.FetchAll();

        Titles = noteRecords.GroupBy(x => x.Title)
                    .Select(x => new RankingRecord(x.Key, x.Count()))
                    .OrderByDescending(x => x.Count)
                    .ToList()
                    ;

        var tags = new List<NoteTagModel>();
        foreach (var r in noteRecords)
        {
            foreach(var t in r.SplitTags())
            {
                tags.Add(t);
            }
        }
        Tags = tags.GroupBy(x => x.Name)
                    .Select(x => new RankingRecord(x.Key, x.Count()))
                    .OrderByDescending(x => x.Count)
                    .ToList()
                    ;
    }
}
