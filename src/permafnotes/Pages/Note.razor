@page "/note"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Text.Json;

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@using permafnotes.Components

@attribute [Authorize]

@inject NoteService NoteService



<div class="note_form">
    <Editor NoteFormModel="@_noteFormModel" />
</div>

<div class="list_action">
    <Title>Note list</Title>
    <Space>
        <SpaceItem Style="min-width:200px;">
            <Search Placeholder="input filter text" EnterButton="true" @bind-Value="@SearchKey" OnSearch="OnSearch" />
        </SpaceItem>
        <SpaceItem>
            <Button OnClick="ClearSearch">Clear filter</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="Refresh">Reflesh</Button>
        </SpaceItem>
        @if(Selected)
        {
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="ClearListSelection">Clear selection</Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="StartEdit">StartEdit</Button>
            </SpaceItem>

        }
        <SpaceItem>
            <Checkbox @bind-Checked="_needToDisplayImportExport">Import/Export</Checkbox>
        </SpaceItem>
        @if (_needToDisplayImportExport)
        {
            <SpaceItem>
                <InputFile OnChange="@ChooseFiles" multiple />
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="Import" Danger>Import</Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="Export">Export</Button>
            </SpaceItem>
        }
    </Space>
</div>

<Table @ref="_list" TItem="NoteListModel" DataSource="@NoteRecords" Size="TableSize.Middle" @bind-SelectedRows="_selectedRows" Style="width:100%" >
    <Selection Key="@context.Created.ToString()" Type="radio" Width="2%" />
    <Column @bind-Field="context.Title"  TData="string" Sortable Filterable Width="15%" />
    <PropertyColumn Property="c=>c.Source" Sortable Filterable Width="30%">
        @((MarkupString)Markdig.Markdown.ToHtml(context.Source))
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Memo" Sortable Filterable Width="30%">
        @((MarkupString)Markdig.Markdown.ToHtml(context.Memo))
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Tags" Filterable Width="10%">
        @foreach (var tag in context.SplitTags())
        {
            <Tag Color="green">@(string.IsNullOrEmpty(tag.Name) ? string.Empty : tag.Name)</Tag>
        }
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Reference" Filterable Width="5%">
        @if (context.HasUrlReference())
        {
            <a href="@context.Reference" target="_blank">link</a>
        }
        else
        {
            @context.Reference
        }
    </PropertyColumn>
    <Column @bind-Field="context.Created" TData="DateTime" Sortable Filterable Width="8%" />
</Table>

    @code {
    [Inject]
    private ILogger<Note> logger { get; set; }
    public IEnumerable<NoteListModel> NoteRecords { get; set; } = new List<NoteListModel>();
    private bool Selected
    {
        get
        {
            return (_selectedRows.Count() == 1);
        }
    }

    private NoteFormModel _noteFormModel = new();

    private bool _needToDisplayImportExport = false;
    private IEnumerable<IBrowserFile> _choosenFiles = new List<IBrowserFile>();

    private string SearchKey { get; set; } = string.Empty;

    ITable? _list;
    private List<string> ToolbarItems = new List<string>() { "Search" };
    private IEnumerable<NoteListModel> _selectedRows = new List<NoteListModel>();
    private Timer _refleshers;

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList(onlyCache: true);

        _refleshers = new Timer(_ =>
        {
            _ = InvokeAsync(async () =>
            {
                await this.RefreshList();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));

        await base.OnInitializedAsync();
    }

    private void ChooseFiles(InputFileChangeEventArgs e)
        => _choosenFiles = e.GetMultipleFiles();

    private async Task Export()
        => await NoteService.Export(NoteRecords);

    private async Task Import()
    {
        foreach (var file in _choosenFiles)
        {
            var buffers = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffers);
            await NoteService.Import(buffers);
        }

        await this.RefreshList();
    }

    private void OnSearch()
        => NoteRecords = this.Filter(this.SearchKey);

    private IEnumerable<NoteListModel> Filter(string key)
    => NoteRecords.Where(x =>
        x.Title.Contains(key)
        || x.Reference.Contains(key)
        || x.Tags.Contains(key)
        || x.Source.Contains(key)
        || x.Memo.Contains(key)
    );

    private async Task Refresh()
        => await this.RefreshList();

    private async Task ClearSearch()
    {
        SearchKey = string.Empty;
        await this.RefreshList();
    }

    private async Task RefreshList(bool onlyCache = false)
    {
        NoteRecords = await NoteService.FetchAll(onlyCache);
        if (string.IsNullOrEmpty(SearchKey))
            return;

        NoteRecords = this.Filter(this.SearchKey);
    }

    private void StartEdit()
    {
        if (_selectedRows.Count() <= 0) 
        {
            return;
        }
        _noteFormModel = _selectedRows.First().ToNoteFormModel();
        ClearListSelection();
    }

    private void ClearListSelection()
    {
        if (_list is not null)
            _list.SetSelection(null);
    }

    private void OnRowClick(RowData<NoteListModel> row)
    {
        logger.LogDebug($"current row: ${row.Data.ToString()}");
    }
}

