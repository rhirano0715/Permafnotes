@page "/note"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel.DataAnnotations
@using PermafnotesDomain.Models
@using PermafnotesDomain.Services
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data

@attribute [Authorize]

@inject NoteService NoteService

s<EditForm Model="@_noteFormModel" OnValidSubmit="@(async () => await Add())">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div>
        <label>
            Title:
            <InputText id="title" @bind-Value="_noteFormModel.Title" ></InputText>
        </label>
        <label>
            Tags
            <InputText id="tags" @bind-Value="_noteFormModel.Tags" ></InputText>
        </label>
        <label>
            Reference
            <InputText id="reference" @bind-Value="_noteFormModel.Reference" ></InputText>
        </label>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Source</th>
                <th>Memo</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <InputTextArea id="source" style="width: 100%;" rows="5" @bind-Value="_noteFormModel.Source" ></InputTextArea>
                </td>
                <td>
                    <InputTextArea id="memo" style="width: 100%;" rows="5" @bind-Value="_noteFormModel.Memo" ></InputTextArea>
                </td>
            </tr>
        </tbody>
    </table>

    <div>
        <button type="submit">Add</button>
    </div>
</EditForm>

<div>
    <button @onclick="Export">Export</button>
</div>

<div>
    <InputFile OnChange="@ChooseFiles" multiple />
    <button @onclick="Import">Import</button>
</div>

<SfGrid @ref="GridNote" DataSource="@NoteRecords" AllowMultiSorting="true" AllowFiltering="true" AllowTextWrap="true" AllowResizing="true" Toolbar="@ToolbarItems" GridLines="GridLine.Default" Height="400" FrozenRows="0" >
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridColumns>
        <GridColumn Field=@nameof(NoteListModel.Title) Width="10%"></GridColumn>
        <GridColumn Field=@nameof(NoteListModel.Source) Width="30%"></GridColumn>
        <GridColumn Field=@nameof(NoteListModel.Memo) Width="30%"></GridColumn>
        <GridColumn Field=@nameof(NoteListModel.Tags) Width="10%"></GridColumn>
        <GridColumn Field=@nameof(NoteListModel.Reference) Width="10%"></GridColumn>
        <GridColumn Field=@nameof(NoteListModel.Created) Type="ColumnType.DateTime" Format="yyyy/MM/dd hh:mm:ss.ffffff" TextAlign="TextAlign.Right" Width="10%"></GridColumn>
   </GridColumns>
</SfGrid>

@code {
    [Inject]
    private ILogger<Note> logger { get; set; }
    public IEnumerable<NoteListModel> NoteRecords { get; set; } = new List<NoteListModel>();
    public SfGrid<NoteListModel> GridNote;


    private NoteFormModel _noteFormModel = new();
    private List<string> ToolbarItems = new List<string>() { "Search" };

    private IEnumerable<IBrowserFile> _choosenFiles = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList();
        // TODO: If nothing else, create a few samples
    }

    private async Task Add()
    {
        await this.AddNote();

        this.ClearForm();

        await this.RefreshList();
    }

    private async Task Export()
        => await NoteService.Export(NoteRecords);

    private void ChooseFiles(InputFileChangeEventArgs e)
        => _choosenFiles = e.GetMultipleFiles();

    private async Task Import()
    {
        foreach (var file in _choosenFiles)
        {
            var buffers = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffers);
            await NoteService.Import(buffers);
        }

        await this.RefreshList();
    }

    private async Task AddNote()
        => await NoteService.Add(_noteFormModel);

    private void ClearForm()
        => this._noteFormModel = new();

    private async Task RefreshList()
    {
        NoteRecords = await NoteService.FetchAll();
        if (GridNote is null)
            return;

        await GridNote.Refresh();
    }
}
