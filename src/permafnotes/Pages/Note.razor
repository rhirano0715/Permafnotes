@page "/note"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel.DataAnnotations
@using PermafnotesDomain.Models
@using PermafnotesDomain.Services
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons

@attribute [Authorize]

@inject NoteService NoteService

<EditForm Model="@_noteFormModel" OnValidSubmit="@(async () => await Add())">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="title">Title</label>
        <SfTextBox ID="title" @bind-Value="_noteFormModel.Title" ></SfTextBox>
    </div>
    <div class="form-group">
        <label for="tags">Tags</label>
        <SfMultiSelect @bind-Value="@_noteFormModel.Tags" DataSource="@Tags">
             <MultiSelectFieldSettings Value="Name"></MultiSelectFieldSettings>
        </SfMultiSelect>
    </div>
    <div class="form-group">
        <label for="reference">Reference</label>
        <SfTextBox ID="reference" @bind-Value="_noteFormModel.Reference" ></SfTextBox>
    </div>
    <div class="form-group">
        <label for="source">Source</label>
        <SfRichTextEditor  ID="source" EditorMode="EditorMode.Markdown" @bind-Value="_noteFormModel.Source" ></SfRichTextEditor>
    </div>
    <div class="form-group">
        <label for="memo">Memo</label>
        <SfRichTextEditor  ID="memo" EditorMode="EditorMode.Markdown" @bind-Value="_noteFormModel.Memo" ></SfRichTextEditor>
    </div>

    <div class="form-group">
        <SfProgressButton Content="Add" CssClass="e-primary"></SfProgressButton>
    </div>
</EditForm>

    <div>
        <InputFile OnChange="@ChooseFiles" multiple />
        <SfProgressButton Content="Import" CssClass="e-danger" @onclick="Import"></SfProgressButton>
        <SfProgressButton Content="Export" CssClass="e-info" @onclick="Export"></SfProgressButton>
    </div>


<div style="position:relative; min-width: 1000px;">
    <SfGrid @ref="GridNote" DataSource="@NoteRecords" AllowSorting="true" AllowFiltering="true" AllowTextWrap="true" AllowResizing="true" Toolbar="@ToolbarItems" GridLines="GridLine.Default" Height="400" Width="100%" FrozenRows="0" >
        <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
        <GridColumns>
            <GridColumn Field=@nameof(NoteListModel.Title) Width="10%"></GridColumn>
            <GridColumn Field=@nameof(NoteListModel.Source) Width="30%"></GridColumn>
            <GridColumn Field=@nameof(NoteListModel.Memo) Width="30%"></GridColumn>
            <GridColumn Field=@nameof(NoteListModel.Tags) Width="10%"></GridColumn>
            <GridColumn Field=@nameof(NoteListModel.Reference) Width="10%"></GridColumn>
            <GridColumn Field=@nameof(NoteListModel.Created) Type="ColumnType.DateTime" Format="yyyy/MM/dd hh:mm:ss.ffffff" TextAlign="TextAlign.Right" Width="10%"></GridColumn>
       </GridColumns>
    </SfGrid>
</div>

@code {
    [Inject]
    private ILogger<Note> logger { get; set; }

    private NoteFormModel _noteFormModel = new();
    private IEnumerable<NoteTagModel> Tags = new List<NoteTagModel>();

    public SfGrid<NoteListModel> GridNote;
    private List<string> ToolbarItems = new List<string>() { "Search" };
    public IEnumerable<NoteListModel> NoteRecords { get; set; } = new List<NoteListModel>();

    private IEnumerable<IBrowserFile> _choosenFiles = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList();
        // TODO: If nothing else, create a few samples
    }

    private async Task Add()
    {
        await this.AddNote();

        this.ClearForm();

        await this.RefreshList();
    }

    private async Task Export()
    {
        await NoteService.Export(NoteRecords);
    }

    private void ChooseFiles(InputFileChangeEventArgs e)
        => _choosenFiles = e.GetMultipleFiles();

    private async Task Import()
    {
        foreach (var file in _choosenFiles)
        {
            var buffers = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffers);
            await NoteService.Import(buffers);
        }

        await this.RefreshList();
    }

    private async Task AddNote()
        => await NoteService.Add(_noteFormModel);

    private void ClearForm()
        => this._noteFormModel = new();

    private async Task RefreshList()
    {
        NoteRecords = await NoteService.FetchAll();
        Tags = NoteService.SelectAllTags(NoteRecords);

        if (GridNote is null)
            return;

        await GridNote.Refresh();
    }
}
