@page "/note"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@attribute [Authorize]

@inject NoteService NoteService

<Form Model="@_noteFormModel" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed">
    <FormItem Label="Title">
        <Input @bind-Value="@context.Title" />
    </FormItem>
    <FormItem Label="Tags">
        <Select Mode="tags"
		        @bind-Values="@context.Tags"
		        Placeholder="Please select"
		        TItemValue="string"
		        TItem="string"
		        Size="@_sizeValue"
		        OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
		        <SelectOptions>
			        @foreach(var tag in Tags)
			        {
				        <SelectOption TItemValue="string" TItem="string" Value=@tag.Name Label=@tag.Name />
			        }
		        </SelectOptions>
        </Select>
    </FormItem>
    <FormItem Label="Reference">
        <Input @bind-Value="@context.Reference" />
    </FormItem>
    <FormItem Label="Source">
        <TextArea @bind-Value="@context.Source" MinRows="@_minRows" />
    </FormItem>
    <FormItem Label="Memo">
        <TextArea @bind-Value="@context.Memo" MinRows="@_minRows" />
    </FormItem>
    <FormItem>
        <Button Type="@ButtonType.Primary" HtmlType="submit">Add</Button>
    </FormItem>
</Form>


<Space>
    <SpaceItem>
        <InputFile OnChange="@ChooseFiles" multiple />
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="Import" Danger >Import</Button>
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="Export" >Export</Button>
    </SpaceItem>
</Space>

<Table TItem="NoteListModel" DataSource="@NoteRecords">
    <Column @bind-Field="context.Title"  TData="string" Sortable Filterable />
    <Column @bind-Field="context.Source" TData="string" Sortable Filterable />
    <Column @bind-Field="context.Memo"   TData="string" Sortable Filterable />
    <Column Title="Tags"                 TData="string" Sortable Filterable >
        @foreach (var tag in context.SplitTags())
        {
            <Tag Color="green">@(string.IsNullOrEmpty(tag.Name) ? string.Empty : tag.Name)</Tag>
        }
    </Column>
    <Column @bind-Field="context.Reference" TData="string"   Sortable Filterable />
    <Column @bind-Field="context.Created"   TData="DateTime" Sortable Filterable />
</Table>

@code {
    [Inject]
    private ILogger<Note> logger { get; set; }

    private string _sizeValue = AntSizeLDSType.Default;
    private uint _minRows = 4;

    private NoteFormModel _noteFormModel = new();
    private IEnumerable<NoteTagModel> Tags = new List<NoteTagModel>();

    private List<string> ToolbarItems = new List<string>() { "Search" };
    public IEnumerable<NoteListModel> NoteRecords { get; set; } = new List<NoteListModel>();

    private IEnumerable<IBrowserFile> _choosenFiles = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList();
        // TODO: If nothing else, create a few samples

        await base.OnInitializedAsync();
    }

    private async Task Add()
    {
        await this.AddNote();

        this.ClearForm();

        await this.RefreshList();
    }

    private async Task Export()
    {
        await NoteService.Export(NoteRecords);
    }

    private void ChooseFiles(InputFileChangeEventArgs e)
        => _choosenFiles = e.GetMultipleFiles();

    private async Task Import()
    {
        foreach (var file in _choosenFiles)
        {
            var buffers = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffers);
            await NoteService.Import(buffers);
        }

        await this.RefreshList();
    }

    private async Task AddNote()
        => await NoteService.Add(_noteFormModel);

    private void ClearForm()
        => this._noteFormModel = new();

    private async Task RefreshList()
    {
        NoteRecords = await NoteService.FetchAll();
        Tags = NoteService.SelectAllTags(NoteRecords);
    }

    private void OnRowClick(RowData<NoteListModel> row)
    {
        logger.LogDebug($"current row: ${row.Data.ToString()}");
    }
    private void OnSelectedItemChangedHandler(string value)
    {
        logger.LogDebug($"selected: ${value}");
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
            logger.LogDebug($"selected: ${string.Join(",", values)}");
    }
    private async Task OnFinish(EditContext editContext)
    {
        await Add();
        logger.LogDebug($"Success:{_noteFormModel.ToString()}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        logger.LogError($"Failed:{_noteFormModel.ToString()}");
    }
}

