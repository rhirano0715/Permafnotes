@page "/note"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.IO
@using System.Text
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Text.Json;

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@attribute [Authorize]

@inject NoteService NoteService

<div class="note_form">
    <Title>Note</Title>
    <Form Model="@_noteFormModel" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed">
        <FormItem Label="Title">
            <Input @bind-Value="@context.Title" ReadOnly/>
        </FormItem>
        <FormItem Label="Tags">
            <Select Mode="tags"
                    @bind-Values="@context.Tags"
                    Placeholder="Please select"
                    TItemValue="string"
                    TItem="string"
                    Size="@_sizeValue"
                    OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
                <SelectOptions>
                    @foreach (var tag in Tags)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@tag.Name Label=@tag.Name />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Reference">
            <Input @bind-Value="@context.Reference" />
        </FormItem>
        <FormItem Label="Source">
            <TextArea @bind-Value="@context.Source" MinRows="@_minRows" ReadOnly/>
        </FormItem>
        <FormItem Label="Memo">
            <TextArea @bind-Value="@context.Memo" MinRows="@_minRows" ReadOnly/>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">Submit</Button>
            <Button Type="@ButtonType.Primary" OnClick="ClearForm">Clear</Button>
        </FormItem>
    </Form>
</div>


<div class="import_export">
    <Title>Import / Export</Title>
    <Space>
        <SpaceItem>
            <InputFile OnChange="@ChooseFiles" multiple />
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="Import" Danger>Import</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="Export">Export</Button>
        </SpaceItem>
    </Space>
</div>

<br />

<div class="list_action">
    <Title>Note list</Title>
    <Space>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="Refresh">Reflesh</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="ClearListSelection">Clear selection</Button>
        </SpaceItem>
        @if(_selectedRows.Count() == 1)
        {
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="StartEdit">StartEdit</Button>
            </SpaceItem>

        }
    </Space>
</div>

<br />

<Table @ref="_list" TItem="NoteListModel" DataSource="@NoteRecords" Size="TableSize.Middle" @bind-SelectedRows="_selectedRows" >
    <Selection Key="@context.Created.ToString()" Type="radio" />
    <Column @bind-Field="context.Title"  TData="string" Sortable Filterable Width="10%" />
    <Column @bind-Field="context.Source" TData="string" Sortable Filterable Width="30%" />
    <Column @bind-Field="context.Memo" TData="string" Sortable Filterable Width="30%" />
    <Column Title="Tags" TData="string" Sortable Filterable Width="10%">
        @foreach (var tag in context.SplitTags())
        {
            <Tag Color="green">@(string.IsNullOrEmpty(tag.Name) ? string.Empty : tag.Name)</Tag>
        }
    </Column>
    <Column Title="Reference"            TData="string"   Sortable Filterable Width="10%" >
        @if (context.Reference.StartsWith("http://") || context.Reference.StartsWith("https://"))
        {
            <a href="@context.Reference">@context.Reference</a>
        }
        else
        {
            @context.Reference
        }
    </Column>
    <Column @bind-Field="context.Created" TData="DateTime" Sortable Filterable Width="10%" />
</Table>

@code {
    [Inject]
    private ILogger<Note> logger { get; set; }

    ITable? _list;

    private string _sizeValue = AntSizeLDSType.Default;
    private uint _minRows = 4;

    private NoteFormModel _noteFormModel = new();
    private IEnumerable<NoteTagModel> Tags = new List<NoteTagModel>();

    private List<string> ToolbarItems = new List<string>() { "Search" };
    public IEnumerable<NoteListModel> NoteRecords { get; set; } = new List<NoteListModel>();

    private IEnumerable<NoteListModel> _selectedRows = new List<NoteListModel>();
    private IEnumerable<IBrowserFile> _choosenFiles = new List<IBrowserFile>();

    private Timer _refleshers;

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList(onlyCache: true);

        _refleshers = new Timer(_ =>
        {
            _ = InvokeAsync(async () =>
            {
                await this.RefreshList();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));

        await base.OnInitializedAsync();
    }

    private async Task OnFinish(EditContext editContext)
    {
        await Add();
        logger.LogDebug($"Success:{_noteFormModel.ToString()}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        logger.LogError($"Failed:{_noteFormModel.ToString()}");
    }

    private async Task Add()
    {
        NoteRecords = await NoteService.Add(_noteFormModel);

        Tags = NoteService.SelectAllTags();

        this.ClearForm();
    }

    private void ClearForm()
        => this._noteFormModel = new()
            {
                Title = this._noteFormModel.Title,
                Source = string.Empty,
                Memo = string.Empty,
                Tags = this._noteFormModel.Tags,
                Reference = string.Empty,
                Created = DateTime.MinValue
            };

    private void ChooseFiles(InputFileChangeEventArgs e)
        => _choosenFiles = e.GetMultipleFiles();

    private async Task Export()
        => await NoteService.Export(NoteRecords);

    private async Task Import()
    {
        foreach (var file in _choosenFiles)
        {
            var buffers = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffers);
            await NoteService.Import(buffers);
        }

        await this.RefreshList();
    }

    private async Task Refresh()
        => await this.RefreshList();

    private async Task RefreshList(bool onlyCache = false)
    {
        NoteRecords = await NoteService.FetchAll(onlyCache);
        Tags = NoteService.SelectAllTags();
    }

    private void StartEdit()
    {
        if (_selectedRows.Count() <= 0) 
        {
            return;
        }
        _noteFormModel = _selectedRows.First().ToNoteFormModel();
    }

    private void ClearListSelection()
    {
        if (_list is not null)
            _list.SetSelection(null);
        ClearForm();
    }

    private void OnRowClick(RowData<NoteListModel> row)
    {
        logger.LogDebug($"current row: ${row.Data.ToString()}");
    }

    private void OnSelectedItemChangedHandler(string value)
    {
        logger.LogDebug($"selected: ${value}");
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
            logger.LogDebug($"selected: ${string.Join(",", values)}");
    }

}

