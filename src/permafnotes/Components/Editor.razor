@using System.ComponentModel
@using System.ComponentModel.DataAnnotations

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@inject NoteService NoteService

<Title>Note editor</Title>

<Form Model="@NoteFormModel" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed" >
    <Space Direction="DirectionVHType.Horizontal" Style="width:100%">
        <SpaceItem Style="width:50%">
            <FormItem Label="Title">
                <Input @bind-Value="@context.Title" ReadOnly="@ReadOnly" />
            </FormItem>
        </SpaceItem>
        <SpaceItem Style="width:50%">
            <FormItem Label="Reference">
                <Input @bind-Value="@context.Reference" />
            </FormItem>
        </SpaceItem>
    </Space>
    <FormItem Label="Tags">
        <Select Mode="tags"
                @bind-Values="@context.Tags"
                Placeholder="Please select"
                TItemValue="string"
                TItem="string"
                Size="@_sizeValue"
                OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
            <SelectOptions>
                @foreach (var tag in Tags)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@tag.Name Label=@tag.Name />
                }
            </SelectOptions>
        </Select>
    </FormItem>
    <Space Direction="DirectionVHType.Horizontal" Align="baseline" Style="width:100%">
        <SpaceItem Style="width:50%">
            <FormItem Label="Source">
                <TextArea @bind-Value="@context.Source" MinRows="@_minRows" ReadOnly="@ReadOnly" />
            </FormItem>
        </SpaceItem>
        <SpaceItem Style="width:50%">
            <FormItem Label="Memo">
                <TextArea @bind-Value="@context.Memo" MinRows="@_minRows" ReadOnly="@ReadOnly" />
            </FormItem>
        </SpaceItem>
    </Space>
    <FormItem>
        <Button Type="@ButtonType.Primary" HtmlType="submit">Submit</Button>
        <Button Type="@ButtonType.Primary" OnClick="Clear">Clear</Button>
    </FormItem>
</Form>


@code {
    [Inject]
    private ILogger<permafnotes.Pages.Note> logger { get; set; }

    [Parameter]
    public NoteFormModel NoteFormModel { get; set; } = new();

    public IEnumerable<NoteTagModel> Tags { get; set; } = new List<NoteTagModel>();

    private bool ReadOnly
    {
        get 
        {
            return (NoteFormModel.Created != DateTime.MinValue);
        }
    }

    private string _sizeValue = AntSizeLDSType.Default;
    private uint _minRows = 4;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.UpdateTag();
    }

    private async Task OnFinish(EditContext editContext)
    {
        await Add();
        await this.UpdateTag();
        this.Clear();
        logger.LogDebug($"Success:{NoteFormModel.ToString()}");
    }

    private async Task OnFinishFailed(EditContext editContext)
    {
        await this.UpdateTag();
        this.Clear();
        logger.LogError($"Failed:{NoteFormModel.ToString()}");
    }

    private async Task Add()
    {
        await NoteService.Add(NoteFormModel);

    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
            logger.LogDebug($"selected: ${string.Join(",", values)}");
    }

    private void Clear()
    {
        this.NoteFormModel.Source = string.Empty;
        this.NoteFormModel.Memo = string.Empty;
        this.NoteFormModel.Reference = string.Empty;
        this.NoteFormModel.Created = DateTime.MinValue;
        StateHasChanged();
    }

    private async Task UpdateTag()
    {
        Tags = await NoteService.SelectAllTags();
        StateHasChanged();
    }
}
