@using System.ComponentModel
@using System.ComponentModel.DataAnnotations

@using AntDesign
@using AntDesign.TableModels

@using PermafnotesDomain.Models
@using PermafnotesDomain.Services

@inject NoteService NoteService

<Title>Note editor</Title>

<Form Model="@NoteFormModel" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed" >
    <Space Wrap>
        <SpaceItem Style="min-width:450px;">
            <FormItem Label="Title">
                @if (ReadOnly)
                {
                    @(context.Title)
                }
                else
                {
                    <Input @bind-Value="@context.Title" ReadOnly="@ReadOnly" />
                }
            </FormItem>
        </SpaceItem>
        <SpaceItem Style="min-width:450px;">
            <FormItem Label="Reference">
                <Input @bind-Value="@context.Reference" />
            </FormItem>
        </SpaceItem>
    </Space>
    <Space>
        <SpaceItem Style="min-width:450px;">
            <FormItem Label="Tags">
                <Select Mode="tags"
                        @bind-Values="@context.Tags"
                        Placeholder="Please select"
                        TItemValue="string"
                        TItem="string"
                        Size="@_sizeValue"
                        OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
                    <SelectOptions>
                        @foreach (var tag in Tags)
                        {
                            <SelectOption TItemValue="string" TItem="string" Value=@tag.Name Label=@tag.Name />
                        }
                    </SelectOptions>
                </Select>
            </FormItem>
        </SpaceItem>
    </Space>
    <Space Wrap Align="baseline">
        <SpaceItem Style="min-width:450px;">
            <FormItem Label="Source">
                @if (ShouldShowPreview())
                {
                    @((MarkupString)Markdig.Markdown.ToHtml(context.Source))
                }
                else
                {
                    <TextArea @bind-Value="@context.Source" MinRows="@_minRows" ReadOnly="@ReadOnly" />
                }
            </FormItem>
        </SpaceItem>
        <SpaceItem Style="min-width:450px;">
            <FormItem Label="Memo">
                @if (ShouldShowPreview())
                {
                    @((MarkupString)Markdig.Markdown.ToHtml(context.Memo))
                }
                else
                {
                    <TextArea @bind-Value="@context.Memo" MinRows="@_minRows" ReadOnly="@ReadOnly" />
                }
            </FormItem>
        </SpaceItem>
    </Space>
    <FormItem>
        <Button Type="@ButtonType.Primary" HtmlType="submit" Danger>Submit</Button>
        <Button Type="@ButtonType.Primary" OnClick="Clear">Clear</Button>
        @if(!ReadOnly)
        {
            <Switch @bind-Checked="_isPreview" CheckedChildren="Preview" UnCheckedChildren="Edit" />
        }
    </FormItem>
</Form>



@code {
    [Inject]
    private ILogger<permafnotes.Pages.Note> logger { get; set; }

    [Parameter]
    public NoteFormModel NoteFormModel { get; set; } = new();

    public IEnumerable<NoteTagModel> Tags { get; set; } = new List<NoteTagModel>();

    private bool ReadOnly
    {
        get 
        {
            return (NoteFormModel.Created != DateTime.MinValue);
        }
    }

    private string _sizeValue = AntSizeLDSType.Default;
    private uint _minRows = 4;
    private bool _isPreview = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.UpdateTag();
    }

    private async Task OnFinish(EditContext editContext)
    {
        await Add();
        await this.UpdateTag();
        this.Clear();
        logger.LogDebug($"Success:{NoteFormModel.ToString()}");
    }

    private async Task OnFinishFailed(EditContext editContext)
    {
        await this.UpdateTag();
        this.Clear();
        logger.LogError($"Failed:{NoteFormModel.ToString()}");
    }

    private async Task Add()
    {
        await NoteService.Add(NoteFormModel);

    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
            logger.LogDebug($"selected: ${string.Join(",", values)}");
    }

    private void Clear()
    {
        this.NoteFormModel.Source = string.Empty;
        this.NoteFormModel.Memo = string.Empty;
        if (!this.NoteFormModel.HasUrlReference())
        {
            this.NoteFormModel.Reference = string.Empty;
        }
        this.NoteFormModel.Created = DateTime.MinValue;
        this._isPreview = false;
        StateHasChanged();
    }

    private async Task UpdateTag()
    {
        Tags = await NoteService.SelectAllTags();
        StateHasChanged();
    }

    private bool ShouldShowPreview()
    {
        return (ReadOnly || _isPreview);
    }
}
